"use strict";

import { FabricObject } from "fabric";
import { PKeyframe } from "./types";
import { AnimatedText } from "./classes/AnimatedText";
import { LygenObject } from "./classes/LygenObject";

/**
 * All the possible properties of an object
 */
export const PropList = [
  "left",
  "top",
  "scaleX",
  "scaleY",
  "width",
  "height",
  "angle",
  "opacity",
  "fill",
  "strokeWidth",
  "stroke",
  "shadow.color",
  "shadow.opacity",
  "shadow.offsetX",
  "shadow.offsetY",
  "shadow.blur",
  "charSpacing",
  "lineHeight",
];
/**
 * All possible animation presets for the texts implemented so far
 */
export const AnimationPresets = [
  "shrink",
  "scale",
  "slide top",
  "slide bottom",
  "slide left",
  "slide right",
  "typewriter",
  "fade in",
];
/**
 * p_keyframes is an array of default keyframes (generated by the system).
 * @note [start, end] is the range on which you can trim the object.
 * [trimstart, trimend] is the range on which the object actually animates.
 * @type {Array<{
 *   start: number, // The start time from where you CANNOT trim the object anymore ahead
 *   end: number,   // The end time where you CANNOT trim the object anymore behind
 *   trimstart: number,  // The start time OFFSET from [start] where you can trim the object
 *   trimend: number,   // The end time OFFSET from [end] where you can trim the object
 *   object: Object,
 *   id: string
 * }>}
 */
export const P_Keyframes: PKeyframe[] = [];
export const AllObjects: LygenObject[] = [];
export const AllAnimatedTexts: FabricObject[] = [];
/**
 * activeLyrics is a map of the current active lyrics, in the format of
 * [endTime, [AnimatedText1, AnimatedText2, ...]]
 * @NOTE activeLyrics is already SORTED by endTime when populated.
 */
export const AllLyrics: Map<number, AnimatedText[]> = new Map();

export const InstrumentList = [
  { name: "Bold on Threshold", value: "boldThreshold" },
  { name: "Size Scaling", value: "sizeScaling" },
  { name: "Animation Speed Scaling", value: "animationSpeedScaling" },
  // Add more instruments as needed
];

export const DefaultInstrumentList = [
  { name: "Bold on Threshold", value: "boldThreshold" },
  { name: "Size Scaling", value: "sizeScaling" },
  { name: "Animation Speed Scaling", value: "animationSpeedScaling" },
  // Add more instruments as needed
];

// make a global ticker to keep track of the current time and current index
class GlobalRegulator {
  public static currentTime = 0;
  public static currentIndex = 0;
  public static paused = false;
  public static impEnlargeFactor = 2;
  public static impAnimSlowFactor = 0.5;
  private static _defaultEnlargedFactor = 2;
  private static _defaultAnimSlowFactor = 0.5;
  /**
   * @CAUTION changing this value will change the color of all the animated texts
   */
  public static impRGBColor = [255, 255, 255];
  public static impBoldThreshold = 0.8;
  public static defaultFont = "Oswald";
  public static defaultAnimDuration = 500;

  public static setCurrentTime(time: number): void {
    GlobalRegulator.currentTime = time;
  }
  public static incrementCurrentIndex(): void {
    GlobalRegulator.currentIndex++;
  }
  public static getAndUpdateCurrentIndex(): number {
    let result = GlobalRegulator.currentIndex;
    GlobalRegulator.currentIndex++;
    return result;
  }
  public static resetCurrentIndex(): void {
    GlobalRegulator.currentIndex = 0;
  }
  public static resetEnlargeFactor(): void {
    GlobalRegulator.impEnlargeFactor = GlobalRegulator._defaultEnlargedFactor;
  }
  public static resetAnimSlowFactor(): void {
    GlobalRegulator.impAnimSlowFactor = GlobalRegulator._defaultAnimSlowFactor;
  }
  public static pause(): void {
    GlobalRegulator.paused = true;
  }
  public static resume(): void {
    GlobalRegulator.paused = false;
  }
}
// the reason why i can only use "Ticker" instead of "new Ticker()" is because i'm using a static class, which means i can't create an instance of it? Why? Because it's static. It's like Math, you can't create an instance of Math, you can only use it as a class. Math.random() is a good example of this.
export const globalRegulator = GlobalRegulator;
